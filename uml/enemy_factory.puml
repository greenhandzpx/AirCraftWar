@startuml
'https://plantuml.com/class-diagram

'''''''' 敌机的工厂模式 '''''''''

' 产品继承关系
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- BossEnemy

' 工厂继承关系
BossEnemyFactory <|-- AbstractEnemyFactory
EliteEnemyFactory <|-- AbstractEnemyFactory
MobEnemyFactory <|-- AbstractEnemyFactory

AbstractEnemyFactory ..> AbstractAircraft
' 创建者
abstract class AbstractEnemyFactory {
    # locationX: int
    # locationY: int
    # speedX:    int
    # speedY:    int
    # hp:        int

    + AbstractEnemyFactory(int locationX, int locationY, int speedX, int speedY, int hp)
    + createEnemy(): AbstractAircraft
}

' 产品
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp):void
    + decreaseHp(int decrease):void
    + getHp():int
    + {abstract} shoot():List<Bullet>
}

' 具体产品
class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + forward():void
    + shoot():List<Bullet>
}

' 具体产品
class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy(int locationX, int locationY,
    int speedX, int speedY, int hp):void
    + forward():void
    + shoot():List<Bullet>
}



' 具体创建者
class BossEnemyFactory {
    + BossEnemyFactory(int locationX, int locationY, int speedX, int speedY, int hp)
    + createEnemy(): AbstractAircraft
}

' 具体创建者
class EliteEnemyFactory {
    + EliteEnemyFactory(int locationX, int locationY, int speedX, int speedY, int hp)
    + createEnemy(): AbstractAircraft
}

' 具体创建者
class MobEnemyFactory {
    + MobEnemyFactory(int locationX, int locationY, int speedX, int speedY, int hp)
    + createEnemy(): AbstractAircraft
}
@enduml