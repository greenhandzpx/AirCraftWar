@startuml
'https://plantuml.com/class-diagram


' 工厂 <|-- 具体工厂
AbstractPropFactory <|-- BloodPropFactory
AbstractPropFactory <|-- BulletPropFactory
AbstractPropFactory <|-- BombPropFactory

' 产品 <|-- 具体产品
AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp
AbstractProp <|-- BulletProp

AbstractProp <.. AbstractPropFactory


abstract class AbstractPropFactory {
    # locationX: int
    # locationY: int
    # speedX: int
    # speedY: int

    + AbstractPropFactory(int locationX, int locationY, int speedX, int speedY)
    + createProp(): AbstractProp
}

class BloodPropFactory {
    - recoverHp: int

    + BloodPropFactory(int locationX, int locationY, int speedX, int speedY, int hp)
    + createProp(): AbstractProp
}

class BulletPropFactory {
    + BulletPropFactory(int locationX, int locationY, int speedX, int speedY)
    + createProp(): AbstractProp
}

class BombPropFactory {
    + BombPropFactory(int locationX, int locationY, int speedX, int speedY)
    + createProp(): AbstractProp
}

abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY):void
    + forward():void
    + propCallback(HeroAircraft hero):void
}

class BloodProp {
    - recoverHp
    + BloodProp(int locationX, int locationY,
    int speedX, int speedY, int recoverHp):void
    + propCallback(HeroAircraft hero):void
}

class BulletProp {
    + BulletProp(int locationX, int locationY,
    int speedX, int speedY):void
    + propCallback(HeroAircraft hero):void
}

class BombProp {
    + BombProp(int locationX, int locationY,
    int speedX, int speedY):void
    + propCallback(HeroAircraft hero):void
}
@enduml